# 명예의 전당 (1)

def solution(k, score):
    record = []
    for d in range(1, len(score) + 1):
      day_record = sorted(score[0:d], reverse=True)
      if k > len(day_record):
        record.append(day_record[-1])
      else:
        record.append(day_record[k-1])
    return record
# 테스트 1 〉	통과 (0.01ms, 10.2MB)
# 테스트 2 〉	통과 (0.01ms, 10.1MB)
# 테스트 3 〉	통과 (0.01ms, 10.2MB)
# 테스트 4 〉	통과 (0.01ms, 10.2MB)
# 테스트 5 〉	통과 (0.02ms, 10.1MB)
# 테스트 6 〉	통과 (0.01ms, 10.3MB)
# 테스트 7 〉	통과 (0.04ms, 10.3MB)
# 테스트 8 〉	통과 (0.03ms, 10.2MB)
# 테스트 9 〉	통과 (0.04ms, 10.2MB)
# 테스트 10 〉	통과 (0.04ms, 10.3MB)
# 테스트 11 〉	통과 (0.06ms, 10.3MB)
# 테스트 12 〉	통과 (7.52ms, 10.2MB)
# 테스트 13 〉	통과 (7.59ms, 10.2MB)
# 테스트 14 〉	통과 (7.59ms, 10.3MB)
# 테스트 15 〉	통과 (37.69ms, 10.4MB)
# 테스트 16 〉	통과 (35.66ms, 10.3MB)
# 테스트 17 〉	통과 (35.51ms, 10.4MB)
# 테스트 18 〉	통과 (37.74ms, 10.3MB)
# 테스트 19 〉	통과 (35.52ms, 10.3MB)
# 테스트 20 〉	통과 (35.75ms, 10.4MB)
# 테스트 21 〉	통과 (33.86ms, 10.3MB)
# 테스트 22 〉	통과 (33.91ms, 10.4MB)
# 테스트 23 〉	통과 (35.47ms, 10.4MB)
# 테스트 24 〉	통과 (34.86ms, 10.3MB)
# 테스트 25 〉	통과 (35.46ms, 10.4MB)
# 테스트 26 〉	통과 (0.01ms, 10.1MB)
  
# print(solution(3, [10, 100, 20, 150, 1, 100, 200]))
# print(solution(4, [0, 300, 40, 300, 20, 70, 150, 50, 500, 1000]))

# 다른 사람 풀이  1
def solution(k, score):

    q = [] # 명예의 전당 배열

    answer = [] # 명예의 전당 최저점 기록 배열
    for s in score: # 점수를 반복문을 돌려서

        q.append(s) # 일단 점수를 명예의 전당에 넣는다.
        if (len(q) > k): # k보다 명예의 전당 배열이 길면
            q.remove(min(q)) # 명예의 전당 배열에서 제일 작은 값을 없앤다.
        answer.append(min(q)) # 하루하루 명예의 전당에서 제일 작은 점수를 answer 배열에 넣는다.

    return answer
# 테스트 1 〉	통과 (0.01ms, 10.1MB)
# 테스트 2 〉	통과 (0.01ms, 10.2MB)
# 테스트 3 〉	통과 (0.01ms, 10.2MB)
# 테스트 4 〉	통과 (0.01ms, 10.1MB)
# 테스트 5 〉	통과 (0.01ms, 10.2MB)
# 테스트 6 〉	통과 (0.01ms, 10.1MB)
# 테스트 7 〉	통과 (0.02ms, 10.3MB)
# 테스트 8 〉	통과 (0.02ms, 10.1MB)
# 테스트 9 〉	통과 (0.02ms, 10MB)
# 테스트 10 〉	통과 (0.03ms, 10.2MB)
# 테스트 11 〉	통과 (0.03ms, 10.3MB)
# 테스트 12 〉	통과 (1.67ms, 10.2MB)
# 테스트 13 〉	통과 (1.61ms, 10.4MB)
# 테스트 14 〉	통과 (1.31ms, 10.4MB)
# 테스트 15 〉	통과 (3.49ms, 10.4MB)
# 테스트 16 〉	통과 (3.49ms, 10.4MB)
# 테스트 17 〉	통과 (3.68ms, 10.2MB)
# 테스트 18 〉	통과 (3.65ms, 10.2MB)
# 테스트 19 〉	통과 (0.55ms, 10.3MB)
# 테스트 20 〉	통과 (0.74ms, 10.3MB)
# 테스트 21 〉	통과 (0.64ms, 10.3MB)
# 테스트 22 〉	통과 (0.75ms, 10.3MB)
# 테스트 23 〉	통과 (0.69ms, 10.4MB)
# 테스트 24 〉	통과 (0.75ms, 10.3MB)
# 테스트 25 〉	통과 (0.79ms, 10.3MB)
# 테스트 26 〉	통과 (0.01ms, 10.2MB)
  
  
# 다른 사람 풀이 2
import heapq # 힙 자료구조를 이용하는 내장 모듈

def solution(k, score):
    max_heap = []
    answer = []

    for sc in score:
        heapq.heappush(max_heap, (-sc, sc)) # heappush(추가할 대상, 추가할 원소) : heap에 원소 추가
        # 뭔가 위처럼 하지 않고 sc만 저장하면 값이 다르게 나온다. 힙부터 공부해야 알 수 있을 것 같다.
        answer.append(max(heapq.nsmallest(k, max_heap))[1]) # nsmallest(n, iterable) : iterable에서 가장 작은 순서대로 n개 가져옴, 위에서 튜플형태로 저장했기때문에 [1]을 해줌

    return answer
# 테스트 1 〉	통과 (0.05ms, 10.2MB)
# 테스트 2 〉	통과 (0.04ms, 10.2MB)
# 테스트 3 〉	통과 (0.02ms, 10.2MB)
# 테스트 4 〉	통과 (0.03ms, 10.3MB)
# 테스트 5 〉	통과 (0.08ms, 10.1MB)
# 테스트 6 〉	통과 (0.02ms, 10.1MB)
# 테스트 7 〉	통과 (0.19ms, 10.1MB)
# 테스트 8 〉	통과 (0.10ms, 10.3MB)
# 테스트 9 〉	통과 (0.08ms, 10.2MB)
# 테스트 10 〉	통과 (0.22ms, 10.2MB)
# 테스트 11 〉	통과 (0.17ms, 10.1MB)
# 테스트 12 〉	통과 (32.60ms, 10.2MB)
# 테스트 13 〉	통과 (31.92ms, 10.2MB)
# 테스트 14 〉	통과 (23.91ms, 10.2MB)
# 테스트 15 〉	통과 (78.59ms, 10.2MB)
# 테스트 16 〉	통과 (82.76ms, 10.5MB)
# 테스트 17 〉	통과 (83.44ms, 10.4MB)
# 테스트 18 〉	통과 (82.08ms, 10.3MB)
# 테스트 19 〉	통과 (21.95ms, 10.3MB)
# 테스트 20 〉	통과 (22.25ms, 10.3MB)
# 테스트 21 〉	통과 (23.22ms, 10.3MB)
# 테스트 22 〉	통과 (23.98ms, 10.4MB)
# 테스트 23 〉	통과 (23.65ms, 10.3MB)
# 테스트 24 〉	통과 (24.96ms, 10.4MB)
# 테스트 25 〉	통과 (24.96ms, 10.4MB)
# 테스트 26 〉	통과 (0.02ms, 10.2MB)
  
# 다른 사람 풀이 3 # 이 풀이가 평균 시간이 제일 조금 걸렸다.
def solution(k, score):
    answer = []
    a=[]
    for i in score:
        a.append(i) # 명예의 전당 배열에 넣고
        a.sort(reverse=True) # 내림차순으로 정렬한다음
        if len(a)>k: # k보다 크면
            del a [-1] # 명예의 전당 맨 뒤 요소를 없앤다.
        answer.append(min(a)) # 그 날의 최저 점수를 기록한다.
    return answer
# 테스트 1 〉	통과 (0.01ms, 10.1MB)
# 테스트 2 〉	통과 (0.01ms, 10.2MB)
# 테스트 3 〉	통과 (0.01ms, 10.1MB)
# 테스트 4 〉	통과 (0.01ms, 10.3MB)
# 테스트 5 〉	통과 (0.02ms, 10.1MB)
# 테스트 6 〉	통과 (0.01ms, 10.3MB)
# 테스트 7 〉	통과 (0.02ms, 10.2MB)
# 테스트 8 〉	통과 (0.02ms, 10.1MB)
# 테스트 9 〉	통과 (0.03ms, 10.2MB)
# 테스트 10 〉	통과 (0.05ms, 10.1MB)
# 테스트 11 〉	통과 (0.05ms, 10.2MB)
# 테스트 12 〉	통과 (1.10ms, 10.3MB)
# 테스트 13 〉	통과 (1.19ms, 10.2MB)
# 테스트 14 〉	통과 (1.05ms, 10.4MB)
# 테스트 15 〉	통과 (2.32ms, 10.1MB)
# 테스트 16 〉	통과 (2.23ms, 10.3MB)
# 테스트 17 〉	통과 (2.36ms, 10.4MB)
# 테스트 18 〉	통과 (2.36ms, 10.3MB)
# 테스트 19 〉	통과 (0.44ms, 10.2MB)
# 테스트 20 〉	통과 (0.41ms, 10.5MB)
# 테스트 21 〉	통과 (0.48ms, 10.2MB)
# 테스트 22 〉	통과 (0.47ms, 10.2MB)
# 테스트 23 〉	통과 (0.54ms, 10.3MB)
# 테스트 24 〉	통과 (0.51ms, 10.2MB)
# 테스트 25 〉	통과 (0.54ms, 10.3MB)
# 테스트 26 〉	통과 (0.01ms, 10.1MB)