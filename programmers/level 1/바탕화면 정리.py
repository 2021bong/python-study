def solution(wallpaper):
    hasFile = []
    for i in range(len(wallpaper)):
        for j in range(len(wallpaper[i])):
            if wallpaper[i][j] == "#":
                hasFile.append((i, j))
    the_min = [len(wallpaper), len(wallpaper[i])]
    the_max = [0, 0]
    for x, y in hasFile:
        if x <= the_min[0]:
            the_min[0] = x
        if y <= the_min[1]:
            the_min[1] = y
        if x >= the_max[0]:
            the_max[0] = x
        if  y >= the_max[1]:
            the_max[1] = y
    the_max[0] += 1
    the_max[1] += 1
    return the_min + the_max

# 테스트 1 〉	통과 (0.01ms, 10.2MB)
# 테스트 2 〉	통과 (0.01ms, 10.2MB)
# 테스트 3 〉	통과 (0.01ms, 10.1MB)
# 테스트 4 〉	통과 (0.04ms, 10.1MB)
# 테스트 5 〉	통과 (0.04ms, 10.2MB)
# 테스트 6 〉	통과 (0.02ms, 10.1MB)
# 테스트 7 〉	통과 (0.21ms, 10.1MB)
# 테스트 8 〉	통과 (0.15ms, 10.1MB)
# 테스트 9 〉	통과 (0.34ms, 10.2MB)
# 테스트 10 〉	통과 (0.11ms, 10.1MB)
# 테스트 11 〉	통과 (0.07ms, 10.1MB)
# 테스트 12 〉	통과 (0.08ms, 10.1MB)
# 테스트 13 〉	통과 (0.09ms, 10.1MB)
# 테스트 14 〉	통과 (0.12ms, 10.1MB)
# 테스트 15 〉	통과 (0.12ms, 10.2MB)
# 테스트 16 〉	통과 (0.25ms, 10.2MB)
# 테스트 17 〉	통과 (0.08ms, 10.2MB)
# 테스트 18 〉	통과 (0.31ms, 10.1MB)
# 테스트 19 〉	통과 (0.14ms, 10.1MB)
# 테스트 20 〉	통과 (0.25ms, 10MB)
# 테스트 21 〉	통과 (0.01ms, 10.2MB)
# 테스트 22 〉	통과 (0.01ms, 10.3MB)
# 테스트 23 〉	통과 (0.03ms, 10.2MB)
# 테스트 24 〉	통과 (0.03ms, 10.3MB)
# 테스트 25 〉	통과 (0.14ms, 10.1MB)
# 테스트 26 〉	통과 (0.25ms, 10.1MB)
# 테스트 27 〉	통과 (0.13ms, 10.3MB)
# 테스트 28 〉	통과 (0.06ms, 10.2MB)
# 테스트 29 〉	통과 (0.09ms, 10.1MB)
# 테스트 30 〉	통과 (1.08ms, 10.3MB)
# 테스트 31 〉	통과 (0.16ms, 10.2MB)

# solution([".#...", "..#..", "...#."])  # [0, 1, 3, 4]
# solution(["..........", ".....#....", "......##..","...##.....", "....#....."])  # [1, 3, 5, 8]
# solution([".##...##.", "#..#.#..#", "#...#...#", ".#.....#.","..#...#..", "...#.#...", "....#...."])  # [0, 0, 7, 9]
# solution(["..", "#."])  # [1, 0, 2, 1]

# 다른 사람 풀이
# 대부분 x, y좌표를 별개로 구하고 그 안에서 min(), max(), min()+1, max()+1를 써서 많이 풀었다.
def solution(wall):
    a, b = [], []
    for i in range(len(wall)):
        for j in range(len(wall[i])):
            if wall[i][j] == "#":
                a.append(i) # 파일이 있으면 x좌표를 a에 넣는다
                b.append(j) # 파일이 있으면 y좌표를 b에 넣는다
    return [min(a), min(b), max(a) + 1, max(b) + 1] # 그 중 가장 작은 값들과 가장 큰 값+1을 넣어 반환한다.

# 테스트 1 〉	통과 (0.02ms, 10.3MB)
# 테스트 2 〉	통과 (0.02ms, 10.2MB)
# 테스트 3 〉	통과 (0.01ms, 10.3MB)
# 테스트 4 〉	통과 (0.03ms, 10.2MB)
# 테스트 5 〉	통과 (0.02ms, 10.1MB)
# 테스트 6 〉	통과 (0.02ms, 10.1MB)
# 테스트 7 〉	통과 (0.09ms, 10.2MB)
# 테스트 8 〉	통과 (0.12ms, 10.2MB)
# 테스트 9 〉	통과 (0.28ms, 10MB)
# 테스트 10 〉	통과 (0.08ms, 10MB)
# 테스트 11 〉	통과 (0.06ms, 10.2MB)
# 테스트 12 〉	통과 (0.10ms, 10.2MB)
# 테스트 13 〉	통과 (0.05ms, 10.3MB)
# 테스트 14 〉	통과 (0.06ms, 10.1MB)
# 테스트 15 〉	통과 (0.09ms, 10.1MB)
# 테스트 16 〉	통과 (0.23ms, 10.2MB)
# 테스트 17 〉	통과 (0.03ms, 9.92MB)
# 테스트 18 〉	통과 (0.19ms, 10.1MB)
# 테스트 19 〉	통과 (0.19ms, 10.2MB)
# 테스트 20 〉	통과 (0.16ms, 10.2MB)
# 테스트 21 〉	통과 (0.01ms, 9.92MB)
# 테스트 22 〉	통과 (0.01ms, 10.1MB)
# 테스트 23 〉	통과 (0.02ms, 10.2MB)
# 테스트 24 〉	통과 (0.03ms, 10.3MB)
# 테스트 25 〉	통과 (0.23ms, 10.1MB)
# 테스트 26 〉	통과 (0.20ms, 10.1MB)
# 테스트 27 〉	통과 (0.07ms, 10.1MB)
# 테스트 28 〉	통과 (0.07ms, 10.1MB)
# 테스트 29 〉	통과 (0.07ms, 10.1MB)
# 테스트 30 〉	통과 (0.50ms, 10MB)
