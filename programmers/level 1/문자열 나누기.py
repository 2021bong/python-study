# 문자열 나누기

def solution(s):
    first = s[0]
    count = {'right' : 1, 'wrong' : 0}
    answer = [] # 생각해보니 어차피 글자를 반환하니까 굳이 배열에 직접적으로 안넣어도 될듯.. 추상적으로 생각하기를 아직도 못하는 것 같다..ㅠㅠ
    last = 0
    for i in range(1, len(s)):
      if first == s[i]:
        count['right'] += 1
      else:
        count['wrong'] += 1
      if count['right'] == count['wrong']:
        if i < len(s) - 1:
          first = s[i + 1]
          answer.append(s[last:i+1])
          last = i + 1
    else:
      answer.append(s[last:])
    return len(answer)
# 테스트 1 〉	통과 (0.01ms, 10.1MB)
# 테스트 2 〉	통과 (1.30ms, 10.2MB)
# 테스트 3 〉	통과 (2.28ms, 10.3MB)
# 테스트 4 〉	통과 (0.01ms, 10.1MB)
# 테스트 5 〉	통과 (0.01ms, 10.3MB)
# 테스트 6 〉	통과 (0.01ms, 10.2MB)
# 테스트 7 〉	통과 (0.01ms, 10.3MB)
# 테스트 8 〉	통과 (0.01ms, 10.1MB)
# 테스트 9 〉	통과 (1.00ms, 10.3MB)
# 테스트 10 〉	통과 (3.54ms, 10.3MB)
# 테스트 11 〉	통과 (0.58ms, 10.1MB)
# 테스트 12 〉	통과 (1.53ms, 10.3MB)
# 테스트 13 〉	통과 (2.96ms, 10.3MB)
# 테스트 14 〉	통과 (2.81ms, 10.5MB)
# 테스트 15 〉	통과 (0.86ms, 10.1MB)
# 테스트 16 〉	통과 (2.50ms, 10.3MB)
# 테스트 17 〉	통과 (1.26ms, 10.3MB)
# 테스트 18 〉	통과 (2.40ms, 10.4MB)
# 테스트 19 〉	통과 (2.87ms, 10.2MB)
# 테스트 20 〉	통과 (2.72ms, 10.3MB)
# 테스트 21 〉	통과 (2.85ms, 10.3MB)
# 테스트 22 〉	통과 (1.77ms, 10.4MB)
# 테스트 23 〉	통과 (0.67ms, 10.4MB)
# 테스트 24 〉	통과 (1.06ms, 10.3MB)
# 테스트 25 〉	통과 (2.79ms, 10.4MB)
# 테스트 26 〉	통과 (2.43ms, 10.3MB)
# 테스트 27 〉	통과 (2.11ms, 10.5MB)
# 테스트 28 〉	통과 (1.38ms, 10.3MB)
# 테스트 29 〉	통과 (2.92ms, 10.2MB)
# 테스트 30 〉	통과 (2.01ms, 10.4MB)
# 테스트 31 〉	통과 (0.00ms, 10.3MB)
# 테스트 32 〉	통과 (0.01ms, 10.2MB)
# 테스트 33 〉	통과 (0.01ms, 10.1MB)
# 테스트 34 〉	통과 (0.01ms, 10.2MB)
# 테스트 35 〉	통과 (0.01ms, 10.3MB)
# 테스트 36 〉	통과 (0.01ms, 10.2MB)
# 테스트 37 〉	통과 (0.01ms, 10.2MB)
# 테스트 38 〉	통과 (0.01ms, 10.2MB)
# 테스트 39 〉	통과 (0.01ms, 10.1MB)
# 테스트 40 〉	통과 (0.03ms, 10.2MB)
# 테스트 41 〉	통과 (2.34ms, 10.4MB)
# 테스트 42 〉	통과 (2.05ms, 10.3MB)
  
# 다른 사람 풀이 보고 약간 더 수정해서 풀어봤는데 여전히 시간이 오래 걸린다..ㅠㅠ 어떻게 해야 0초대로 풀지..
def solution(s):
    first = s[0]
    right = 1
    wrong = 0
    answer = 0
    last = 0
    for i in range(1, len(s)):
      if first == s[i]:
        right += 1
      else:
        wrong += 1
      if right == wrong:
        if i < len(s) - 1:
          first = s[i + 1]
          answer +=1
          last = i + 1
    else:
      answer += 1
    return answer
# 테스트 1 〉	통과 (0.00ms, 10.2MB)
# 테스트 2 〉	통과 (0.98ms, 10.2MB)
# 테스트 3 〉	통과 (1.32ms, 10.1MB)
# 테스트 4 〉	통과 (0.01ms, 10.2MB)
# 테스트 5 〉	통과 (0.01ms, 10.2MB)
# 테스트 6 〉	통과 (0.01ms, 10.1MB)
# 테스트 7 〉	통과 (0.00ms, 10.1MB)
# 테스트 8 〉	통과 (0.01ms, 10.2MB)
# 테스트 9 〉	통과 (0.57ms, 10.4MB)
# 테스트 10 〉	통과 (1.09ms, 10MB)
# 테스트 11 〉	통과 (0.36ms, 10.3MB)
# 테스트 12 〉	통과 (0.86ms, 10.2MB)
# 테스트 13 〉	통과 (1.61ms, 10.2MB)
# 테스트 14 〉	통과 (1.59ms, 10.3MB)
# 테스트 15 〉	통과 (0.36ms, 10.3MB)
# 테스트 16 〉	통과 (1.45ms, 10.1MB)
# 테스트 17 〉	통과 (0.70ms, 10.4MB)
# 테스트 18 〉	통과 (1.42ms, 10.1MB)
# 테스트 19 〉	통과 (0.81ms, 10.1MB)
# 테스트 20 〉	통과 (1.59ms, 10.2MB)
# 테스트 21 〉	통과 (1.63ms, 10.4MB)
# 테스트 22 〉	통과 (1.02ms, 10.1MB)
# 테스트 23 〉	통과 (0.41ms, 10.1MB)
# 테스트 24 〉	통과 (0.63ms, 10.1MB)
# 테스트 25 〉	통과 (1.56ms, 10.2MB)
# 테스트 26 〉	통과 (1.69ms, 10.4MB)
# 테스트 27 〉	통과 (1.21ms, 10.2MB)
# 테스트 28 〉	통과 (0.88ms, 10.1MB)
# 테스트 29 〉	통과 (3.56ms, 10.3MB)
# 테스트 30 〉	통과 (1.75ms, 10.2MB)
# 테스트 31 〉	통과 (0.00ms, 10.1MB)
# 테스트 32 〉	통과 (0.01ms, 10.2MB)
# 테스트 33 〉	통과 (0.01ms, 10.1MB)
# 테스트 34 〉	통과 (0.01ms, 10.2MB)
# 테스트 35 〉	통과 (0.01ms, 10.2MB)
# 테스트 36 〉	통과 (0.01ms, 10.3MB)
# 테스트 37 〉	통과 (0.01ms, 10.2MB)
# 테스트 38 〉	통과 (0.01ms, 10.2MB)
# 테스트 39 〉	통과 (0.01ms, 10.2MB)
# 테스트 40 〉	통과 (0.01ms, 10.1MB)
# 테스트 41 〉	통과 (2.11ms, 10.3MB)
# 테스트 42 〉	통과 (1.18ms, 10.2MB)
  
# print(solution("banana"))
# print(solution("abracadabra"))
# print(solution("aaabbaccccabba"))


# 다른 사람 풀이 1
def solution(s):
    answer = 0
    sav1=0
    sav2=0
    for i in s:
        if sav1==sav2: # 처음 시작하면 무조건 실행
            answer+=1 # 하나는 자를거니까 올림, 마지막이 같지 않아도 이미 하나 올리고 시작하니까 추가 안해줘도 됨
            a=i # 첫번째 글자 정함
        if i==a: # 맨처음에는 같으니까 올라감
            sav1+=1 # 같은글자
        else:
            sav2+=1 # 다른 글자
    return answer
# 테스트 1 〉	통과 (0.00ms, 10.2MB)
# 테스트 2 〉	통과 (0.34ms, 10.1MB)
# 테스트 3 〉	통과 (0.65ms, 10.2MB)
# 테스트 4 〉	통과 (0.00ms, 10.2MB)
# 테스트 5 〉	통과 (0.00ms, 10.4MB)
# 테스트 6 〉	통과 (0.00ms, 10.1MB)
# 테스트 7 〉	통과 (0.00ms, 10.3MB)
# 테스트 8 〉	통과 (0.00ms, 10.2MB)
# 테스트 9 〉	통과 (0.26ms, 10.2MB)
# 테스트 10 〉	통과 (0.52ms, 10.2MB)
# 테스트 11 〉	통과 (0.23ms, 10.3MB)
# 테스트 12 〉	통과 (0.39ms, 10.1MB)
# 테스트 13 〉	통과 (0.98ms, 10.1MB)
# 테스트 14 〉	통과 (0.78ms, 10.3MB)
# 테스트 15 〉	통과 (0.16ms, 10.2MB)
# 테스트 16 〉	통과 (0.67ms, 10.1MB)
# 테스트 17 〉	통과 (0.32ms, 10.1MB)
# 테스트 18 〉	통과 (0.60ms, 10.2MB)
# 테스트 19 〉	통과 (0.38ms, 10.1MB)
# 테스트 20 〉	통과 (0.67ms, 10.2MB)
# 테스트 21 〉	통과 (0.77ms, 10.2MB)
# 테스트 22 〉	통과 (0.45ms, 10.2MB)
# 테스트 23 〉	통과 (0.17ms, 10.3MB)
# 테스트 24 〉	통과 (0.29ms, 10.3MB)
# 테스트 25 〉	통과 (0.75ms, 10.2MB)
# 테스트 26 〉	통과 (0.64ms, 9.93MB)
# 테스트 27 〉	통과 (0.59ms, 10.1MB)
# 테스트 28 〉	통과 (0.61ms, 10.2MB)
# 테스트 29 〉	통과 (0.78ms, 10.2MB)
# 테스트 30 〉	통과 (0.39ms, 10.1MB)
# 테스트 31 〉	통과 (0.00ms, 10.2MB)
# 테스트 32 〉	통과 (0.00ms, 10.1MB)
# 테스트 33 〉	통과 (0.00ms, 10.1MB)
# 테스트 34 〉	통과 (0.00ms, 10.2MB)
# 테스트 35 〉	통과 (0.01ms, 10.2MB)
# 테스트 36 〉	통과 (0.01ms, 10.2MB)
# 테스트 37 〉	통과 (0.01ms, 10.2MB)
# 테스트 38 〉	통과 (0.01ms, 10.3MB)
# 테스트 39 〉	통과 (0.00ms, 10.2MB)
# 테스트 40 〉	통과 (0.01ms, 10.3MB)
# 테스트 41 〉	통과 (0.79ms, 10.3MB)
# 테스트 42 〉	통과 (0.73ms, 10.1MB)


# 다른 사람 풀이 2
from collections import deque # deque 사용

def solution(s):

    ans = 0

    q = deque(s)    
    while q:
        a, b = 1, 0
        x = q.popleft() # 먼저 하나 빼고

        while q:
            n = q.popleft() # 또 빼서
            if n == x: # 같으면
                a += 1 # 같은 글자(a) 올리고
            else:
                b += 1 # 다르면 다른 글자(b) 올리고

            if a == b: # a와 b가 같으면 정답 올리기
                ans += 1
                break # 2번째 while문 나가서 첫글자 다시 정함
    if a != b: # 같은 글자 다른 글자 개수가 다르면 마지막에 잘린거니까
        ans += 1 # 하나 더 올려줌

    return ans
# 테스트 1 〉	통과 (0.01ms, 10.2MB)
# 테스트 2 〉	통과 (0.39ms, 10.3MB)
# 테스트 3 〉	통과 (1.45ms, 10.2MB)
# 테스트 4 〉	통과 (0.01ms, 10.2MB)
# 테스트 5 〉	통과 (0.00ms, 10.2MB)
# 테스트 6 〉	통과 (0.00ms, 10.2MB)
# 테스트 7 〉	통과 (0.01ms, 10.2MB)
# 테스트 8 〉	통과 (0.01ms, 10.3MB)
# 테스트 9 〉	통과 (0.28ms, 10.3MB)
# 테스트 10 〉	통과 (0.57ms, 10.2MB)
# 테스트 11 〉	통과 (0.19ms, 10.3MB)
# 테스트 12 〉	통과 (0.77ms, 10.1MB)
# 테스트 13 〉	통과 (0.88ms, 10.3MB)
# 테스트 14 〉	통과 (0.81ms, 10.4MB)
# 테스트 15 〉	통과 (0.19ms, 10.2MB)
# 테스트 16 〉	통과 (0.75ms, 10.2MB)
# 테스트 17 〉	통과 (0.78ms, 10.2MB)
# 테스트 18 〉	통과 (0.83ms, 10.2MB)
# 테스트 19 〉	통과 (0.47ms, 10.3MB)
# 테스트 20 〉	통과 (0.73ms, 10.3MB)
# 테스트 21 〉	통과 (1.70ms, 10.4MB)
# 테스트 22 〉	통과 (0.77ms, 10.2MB)
# 테스트 23 〉	통과 (0.20ms, 10.1MB)
# 테스트 24 〉	통과 (0.33ms, 10.3MB)
# 테스트 25 〉	통과 (0.83ms, 10.2MB)
# 테스트 26 〉	통과 (1.50ms, 10.1MB)
# 테스트 27 〉	통과 (0.70ms, 10.2MB)
# 테스트 28 〉	통과 (0.87ms, 10.2MB)
# 테스트 29 〉	통과 (0.90ms, 10.3MB)
# 테스트 30 〉	통과 (0.71ms, 10.2MB)
# 테스트 31 〉	통과 (0.00ms, 10.1MB)
# 테스트 32 〉	통과 (0.01ms, 10.2MB)
# 테스트 33 〉	통과 (0.01ms, 10.1MB)
# 테스트 34 〉	통과 (0.00ms, 10.4MB)
# 테스트 35 〉	통과 (0.01ms, 10.1MB)
# 테스트 36 〉	통과 (0.01ms, 10.2MB)
# 테스트 37 〉	통과 (0.01ms, 10.3MB)
# 테스트 38 〉	통과 (0.01ms, 10.1MB)
# 테스트 39 〉	통과 (0.01ms, 10.3MB)
# 테스트 40 〉	통과 (0.01ms, 10.2MB)
# 테스트 41 〉	통과 (1.87ms, 10.3MB)
# 테스트 42 〉	통과 (1.23ms, 10.3MB)